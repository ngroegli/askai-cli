name: Python Linting

on:
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:
    # Allows manual triggering

jobs:
  lint:
    name: Run Pylint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Set up the environment properly
          echo "PYTHONPATH=.:$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Analyze code with Pylint
        id: pylint_run
        run: |
          # Make sure there are Python files to analyze
          PYTHON_FILES=$(find ./python -name "*.py" | xargs)
          if [ -z "$PYTHON_FILES" ]; then
            echo "No Python files found to analyze! Check the paths and file structure."
            exit 0
          fi

          # Saving the list of Python files for later use
          echo "$PYTHON_FILES" > python_files.txt

          echo "::group::Full Pylint Output"
          # Run pylint using the project's configuration file with full output
          # Store the exit code to use it later
          PYTHONPATH=python pylint --rcfile=.pylintrc $PYTHON_FILES || echo "Pylint check found issues"
          PYLINT_EXIT_CODE=$?

          # Interpret the exit code - only 0, 1, and 2 are meaningful for workflow success/failure
          # 0 = Success, 1 = Fatal Error, 2 = Error
          # Other codes (4, 8, 16, 32) or combinations are not fatal errors
          if [ $PYLINT_EXIT_CODE -eq 0 ]; then
            echo "Pylint found no issues"
            SIMPLIFIED_CODE=0
          elif [ $PYLINT_EXIT_CODE -eq 1 ] || [ $PYLINT_EXIT_CODE -eq 2 ]; then
            echo "Pylint found fatal errors or errors"
            SIMPLIFIED_CODE=1
          else
            echo "Pylint found non-fatal issues (warnings, conventions, etc.)"
            SIMPLIFIED_CODE=0
          fi

          echo "pylint_exit_code=$PYLINT_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "simplified_code=$SIMPLIFIED_CODE" >> $GITHUB_OUTPUT
          echo "Pylint exit code: $PYLINT_EXIT_CODE (simplified to: $SIMPLIFIED_CODE)"
          echo "::endgroup::"

      - name: Check issues by severity
        run: |
          # Use the saved list of Python files
          PYTHON_FILES=$(cat python_files.txt)
          if [ -z "$PYTHON_FILES" ]; then
            echo "No Python files found to analyze! Check the paths and file structure."
            exit 0  # Don't fail if no files found
          fi

          # Extract disabled warnings from .pylintrc to apply consistently
          DISABLED_CHECKS=$(grep -oP '^disable=\K.*' .pylintrc)
          echo "Applying disabled warnings from .pylintrc: $DISABLED_CHECKS"

          echo "## Pylint Results by Severity" >> $GITHUB_STEP_SUMMARY

          # 1. Check for critical errors (error category) - fail if any are found
          echo "::group::CRITICAL ERRORS (E) - These will block merging"
          # Use the same command as in run_pylint.sh for consistency
          CRITICAL_ERRORS=$(PYTHONPATH=python pylint --rcfile=.pylintrc --disable=C,W,R,I --enable=E --disable=$DISABLED_CHECKS --msg-template="{path}:{line}:{column}: [{msg_id}({symbol}), {category}] {msg}" $PYTHON_FILES 2>&1 || echo "")
          CRITICAL_EXIT_CODE=${PIPESTATUS[0]}

          echo "Critical errors exit code: $CRITICAL_EXIT_CODE"

          # Check if there are actual errors (not just a perfect score message)
          # Look for both the exit code AND for specific error patterns in the output
          if [[ "$CRITICAL_ERRORS" =~ \[\w+\(.*\), error\] ]]; then
            echo "$CRITICAL_ERRORS"
            echo "### ❌ CRITICAL ERRORS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$CRITICAL_ERRORS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "::error::Critical Python errors were found! See details in the log."
            HAS_CRITICAL_ERRORS=1
          else
            echo "No critical errors found."
            echo "### ✅ No critical errors found" >> $GITHUB_STEP_SUMMARY
            HAS_CRITICAL_ERRORS=0
          fi
          echo "::endgroup::"

          # 2. Check for warnings - these are important but we'll just report them
          echo -e "\n::group::WARNINGS (W) - These should be addressed but won't block merging"
          # Keep the warnings disabled in .pylintrc also disabled here
          WARNINGS=$(PYTHONPATH=python pylint --rcfile=.pylintrc --disable=C,E,R,I --enable=W --disable=$DISABLED_CHECKS --msg-template="{path}:{line}:{column}: [{msg_id}({symbol}), {category}] {msg}" $PYTHON_FILES 2>&1 || echo "")

          if [ -n "$WARNINGS" ]; then
            echo "$WARNINGS"
            echo "### ⚠️ WARNINGS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$WARNINGS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No warnings found."
            echo "### ✅ No warnings found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "::endgroup::"

          # 3. Check for refactoring suggestions - just for information
          echo -e "\n::group::REFACTORING SUGGESTIONS (R) - Recommendations to improve code quality"
          REFACTORING=$(PYTHONPATH=python pylint --rcfile=.pylintrc --disable=C,E,W,I --enable=R --disable=$DISABLED_CHECKS --msg-template="{path}:{line}:{column}: [{msg_id}({symbol}), {category}] {msg}" $PYTHON_FILES 2>&1 || echo "")

          if [ -n "$REFACTORING" ]; then
            echo "$REFACTORING"
            echo "### 🔧 REFACTORING SUGGESTIONS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$REFACTORING" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No refactoring suggestions found."
            echo "### ✅ No refactoring suggestions" >> $GITHUB_STEP_SUMMARY
          fi
          echo "::endgroup::"

          # 4. Check for convention violations - just for information
          echo -e "\n::group::CONVENTION ISSUES (C) - Style suggestions"
          CONVENTIONS=$(PYTHONPATH=python pylint --rcfile=.pylintrc --disable=E,W,R,I --enable=C --disable=$DISABLED_CHECKS --msg-template="{path}:{line}:{column}: [{msg_id}({symbol}), {category}] {msg}" $PYTHON_FILES 2>&1 || echo "")

          if [ -n "$CONVENTIONS" ]; then
            echo "$CONVENTIONS"
            echo "### 📝 CONVENTION ISSUES" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$CONVENTIONS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No convention issues found."
            echo "### ✅ No convention issues" >> $GITHUB_STEP_SUMMARY
          fi
          echo "::endgroup::"

          # 5. Check for info messages - just for information
          echo -e "\n::group::INFORMATION (I) - Additional info"
          INFORMATION=$(PYTHONPATH=python pylint --rcfile=.pylintrc --disable=E,W,R,C --enable=I --disable=$DISABLED_CHECKS --msg-template="{path}:{line}:{column}: [{msg_id}({symbol}), {category}] {msg}" $PYTHON_FILES 2>&1 || echo "")

          if [ -n "$INFORMATION" ]; then
            echo "$INFORMATION"
            echo "### ℹ️ INFORMATION" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$INFORMATION" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No information messages found."
            echo "### ✅ No information messages" >> $GITHUB_STEP_SUMMARY
          fi
          echo "::endgroup::"

          # Determine if the build should fail (only critical errors cause failure)
          # Follow the same logic as in run_pylint.sh
          if [ $CRITICAL_EXIT_CODE -eq 4 ]; then
            echo "Exit code 4 detected (no files found or config issue). This is not a critical error."
            exit 0  # Don't fail the build for this
          # Only fail if we found critical errors
          elif [ $HAS_CRITICAL_ERRORS -eq 1 ]; then
            echo "::error::Critical errors found. Failing the build."
            exit 1
          else
            echo "No critical errors found that would block merging."
          fi

          # Just for GitHub status, log the overall pylint result too
          echo "Overall Pylint exit code: ${{ steps.pylint_run.outputs.pylint_exit_code }}"
          echo "Simplified exit code: ${{ steps.pylint_run.outputs.simplified_code }}"

          # Explanation of pylint exit codes:
          echo "::notice::Pylint Exit Code Legend:"
          echo "::notice::0 = No issues"
          echo "::notice::1 = Fatal message"
          echo "::notice::2 = Error"
          echo "::notice::4 = Warning"
          echo "::notice::8 = Refactor"
          echo "::notice::16 = Convention"
          echo "::notice::32 = Usage error"
          echo "::notice::Combinations like 24 (4+4+16) mean multiple issue types"
