name: Python Linting

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Set up the environment properly
          echo "PYTHONPATH=.:$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Analyze code with Pylint
        run: |
          # Make sure there are Python files to analyze
          PYTHON_FILES=$(find ./python -name "*.py" | xargs)
          if [ -z "$PYTHON_FILES" ]; then
            echo "No Python files found to analyze! Check the paths and file structure."
            exit 0
          fi

          # Run pylint using the project's configuration file
          PYTHONPATH=python pylint --rcfile=pylintrc $PYTHON_FILES || echo "Pylint check failed but we're continuing to see all warnings and errors"
          # The exit code is ignored to see all warnings but will be enforced in future iterations

      - name: Enforce critical errors
        run: |
          # Check for critical errors (error category) - fail if any are found
          # FIXED: Removed the "!" operator that was inverting the logic
          PYTHON_FILES=$(find ./python -name "*.py" | xargs)
          if [ -z "$PYTHON_FILES" ]; then
            echo "No Python files found to analyze! Check the paths and file structure."
            exit 0  # Don't fail if no files found
          fi

          PYTHONPATH=python pylint --rcfile=pylintrc --disable=C,W,R --enable=E --fail-under=10.0 $PYTHON_FILES
          EXIT_CODE=$?

          # Exit code 4 means no Python files were found or config issue
          if [ $EXIT_CODE -eq 4 ]; then
            echo "Exit code 4 detected (no files found or config issue). This is not a critical error."
            exit 0  # Don't fail the build for this
          elif [ $EXIT_CODE -ne 0 ]; then
            echo "Critical errors found. Failing the build."
            exit 1
          else
            echo "No critical errors found. Proceeding with the build."
          fi

          # Check for warnings - these are important but we'll just report them for now
          if [ -n "$PYTHON_FILES" ]; then
            WARNINGS=$(PYTHONPATH=python pylint --rcfile=pylintrc --disable=C,E,R --enable=W --msg-template="{path}:{line}:{column}: {msg_id}: {msg} ({symbol})" $PYTHON_FILES || echo "")
            if [ -n "$WARNINGS" ]; then
              echo "Warnings found but not failing the build:"
              echo "$WARNINGS"
            else
              echo "No warnings found."
            fi
          else
            echo "No Python files found to check for warnings."
          fi
